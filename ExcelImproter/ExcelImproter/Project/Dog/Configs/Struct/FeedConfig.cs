/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Common.Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class FeedConfig : TBase
  {
    private string _name;
    private int _initData;
    private int _maxData;
    private int _dropSpeed;
    private int _feedSpeed;
    private int _feedTime;

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public int InitData
    {
      get
      {
        return _initData;
      }
      set
      {
        __isset.initData = true;
        this._initData = value;
      }
    }

    public int MaxData
    {
      get
      {
        return _maxData;
      }
      set
      {
        __isset.maxData = true;
        this._maxData = value;
      }
    }

    public int DropSpeed
    {
      get
      {
        return _dropSpeed;
      }
      set
      {
        __isset.dropSpeed = true;
        this._dropSpeed = value;
      }
    }

    public int FeedSpeed
    {
      get
      {
        return _feedSpeed;
      }
      set
      {
        __isset.feedSpeed = true;
        this._feedSpeed = value;
      }
    }

    public int FeedTime
    {
      get
      {
        return _feedTime;
      }
      set
      {
        __isset.feedTime = true;
        this._feedTime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool name;
      public bool initData;
      public bool maxData;
      public bool dropSpeed;
      public bool feedSpeed;
      public bool feedTime;
    }

    public FeedConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              InitData = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              MaxData = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              DropSpeed = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              FeedSpeed = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              FeedTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("FeedConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (__isset.initData) {
        field.Name = "initData";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(InitData);
        oprot.WriteFieldEnd();
      }
      if (__isset.maxData) {
        field.Name = "maxData";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MaxData);
        oprot.WriteFieldEnd();
      }
      if (__isset.dropSpeed) {
        field.Name = "dropSpeed";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DropSpeed);
        oprot.WriteFieldEnd();
      }
      if (__isset.feedSpeed) {
        field.Name = "feedSpeed";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(FeedSpeed);
        oprot.WriteFieldEnd();
      }
      if (__isset.feedTime) {
        field.Name = "feedTime";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(FeedTime);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("FeedConfig(");
      sb.Append("Name: ");
      sb.Append(Name);
      sb.Append(",InitData: ");
      sb.Append(InitData);
      sb.Append(",MaxData: ");
      sb.Append(MaxData);
      sb.Append(",DropSpeed: ");
      sb.Append(DropSpeed);
      sb.Append(",FeedSpeed: ");
      sb.Append(FeedSpeed);
      sb.Append(",FeedTime: ");
      sb.Append(FeedTime);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
