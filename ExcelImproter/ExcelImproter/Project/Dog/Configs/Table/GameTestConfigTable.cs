/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Common.Config.Table
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class GameTestConfigTable : TBase
  {
    private List<Common.Config.FeedConfig> _feedConfigList;
    private List<Common.Config.ExchangeConfig> _exchangeConfigList;
    private List<Common.Config.ExchangeCDConfig> _exchangeCDConfigList;

    public List<Common.Config.FeedConfig> FeedConfigList
    {
      get
      {
        return _feedConfigList;
      }
      set
      {
        __isset.feedConfigList = true;
        this._feedConfigList = value;
      }
    }

    public List<Common.Config.ExchangeConfig> ExchangeConfigList
    {
      get
      {
        return _exchangeConfigList;
      }
      set
      {
        __isset.exchangeConfigList = true;
        this._exchangeConfigList = value;
      }
    }

    public List<Common.Config.ExchangeCDConfig> ExchangeCDConfigList
    {
      get
      {
        return _exchangeCDConfigList;
      }
      set
      {
        __isset.exchangeCDConfigList = true;
        this._exchangeCDConfigList = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool feedConfigList;
      public bool exchangeConfigList;
      public bool exchangeCDConfigList;
    }

    public GameTestConfigTable() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                FeedConfigList = new List<Common.Config.FeedConfig>();
                TList _list289 = iprot.ReadListBegin();
                for( int _i290 = 0; _i290 < _list289.Count; ++_i290)
                {
                  Common.Config.FeedConfig _elem291 = new Common.Config.FeedConfig();
                  _elem291 = new Common.Config.FeedConfig();
                  _elem291.Read(iprot);
                  FeedConfigList.Add(_elem291);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                ExchangeConfigList = new List<Common.Config.ExchangeConfig>();
                TList _list292 = iprot.ReadListBegin();
                for( int _i293 = 0; _i293 < _list292.Count; ++_i293)
                {
                  Common.Config.ExchangeConfig _elem294 = new Common.Config.ExchangeConfig();
                  _elem294 = new Common.Config.ExchangeConfig();
                  _elem294.Read(iprot);
                  ExchangeConfigList.Add(_elem294);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                ExchangeCDConfigList = new List<Common.Config.ExchangeCDConfig>();
                TList _list295 = iprot.ReadListBegin();
                for( int _i296 = 0; _i296 < _list295.Count; ++_i296)
                {
                  Common.Config.ExchangeCDConfig _elem297 = new Common.Config.ExchangeCDConfig();
                  _elem297 = new Common.Config.ExchangeCDConfig();
                  _elem297.Read(iprot);
                  ExchangeCDConfigList.Add(_elem297);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("GameTestConfigTable");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (FeedConfigList != null && __isset.feedConfigList) {
        field.Name = "feedConfigList";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, FeedConfigList.Count));
          foreach (Common.Config.FeedConfig _iter298 in FeedConfigList)
          {
            _iter298.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ExchangeConfigList != null && __isset.exchangeConfigList) {
        field.Name = "exchangeConfigList";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ExchangeConfigList.Count));
          foreach (Common.Config.ExchangeConfig _iter299 in ExchangeConfigList)
          {
            _iter299.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ExchangeCDConfigList != null && __isset.exchangeCDConfigList) {
        field.Name = "exchangeCDConfigList";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ExchangeCDConfigList.Count));
          foreach (Common.Config.ExchangeCDConfig _iter300 in ExchangeCDConfigList)
          {
            _iter300.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("GameTestConfigTable(");
      sb.Append("FeedConfigList: ");
      sb.Append(FeedConfigList);
      sb.Append(",ExchangeConfigList: ");
      sb.Append(ExchangeConfigList);
      sb.Append(",ExchangeCDConfigList: ");
      sb.Append(ExchangeCDConfigList);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
